Server starten

    über iex
        -> iex -S mix
        -> Servy.HttpServer.start(4000)
        # 4000 ist ein beliebiger port. Dieser darf nicht bereits vergeben sein.
    über command-line
        -> mix run -e "Servy.HttpServer.start(1602)"

Request senden bzw. Content aufrufen

    über einen Browser. Dieser ist der Client.
        # setzt sich aus der IP-Adresse, dem Port und dem gewünschten Pfad zusammen
        -> http://localhost:4000/bears
        -> http://localhost:4000/api/bears
        # hier sind nur http requests definiert und keine https
    über Command line
        -> curl http://localhost:1602/api/bears


curl -H 'Content-Type: application/json' -XPOST http://localhost:4000/api/bears -d '{"name": "Breezly", "type": "Polar"}'
    The -H option is used to set the Content-Type header to application/json. 
    The -X option sets the request method to POST. 
    And the -d option sets the request body to the given JSON string representing the bear you want to create. 


Handlich Processes in iex
    pid = spawn(fn -> :timer.sleep(1000); IO.inspect("Howdy!") end)
    Process.alive?(pid}\n"
    spawn(fn -> serve(client_socket)
    IO.puts "#{inspect self()}: Working on it!\n"
 
    Process.list |> Enum.count # lists number of running Processes
    :erlang.system_info(:process_count) # the same
    :erlang.system_info(:process_limit) # maximum number of processes
    :observer.start # opens GUI for process handling
    
    passing as an anonymous function 
    pid = spawn(fn -> Servy.HttpServer.start(4000) end) -> Name of initial func: erlang:apply
    passing as three arguments
     pid = spawn(Servy.HttpServer, :start, [4000]) -> Name of initial func: <module.function>


Enum.map(1..10_000, fn(x) -> spawn(fn -> IO.puts x * x end) end)

Sending Messages between parallel processes
    send(parant_pid, {:result, "Cam-1-snapshop.jpg"})

    parent = self()
    spawn(fn -> send(parent, {:result, "1-snapshot.jpg"}) end)
    Process.info(parent, :messages)
    
    receive do
      {:result, filename} -> filename
    end 
    receive do {:result, filename} -> filename end     

That works because the request-handling process has access to the client_socket. 
It reads the request from the socket and then writes the response back over that client_socket. 
There's no need to send a result to the parent process (the process that's runnning the web server) 
because the request-handling process sends the result directly back to the HTTP client via the socket.

Processes, In a Nut

Here are some important characteristics of processes we've learned so far, in a nutshell:

    they are lightweight and fast to spawn

    they run concurrently, and even in parallel if you have multiple CPU cores

    they are isolated from other processes

    they don't share anything with other processes

    they have their own private mailbox

    they communicate with other processes only by sending and receiving messages

Retrieving information from a webside with HTTPoison
    HTTPoison.get "https://jsonplaceholder.typicode.com/users/1"
    {:ok, response} = HTTPoison.get "https://jsonplaceholder.typicode.com/users/1"
    response.body <- unter anderen
    body_map = Poison.Parser.parse!(response.body, %{})
    city = body_map |> Map.get("address") |> Map.get("city")
    city = body_map["address"]["city"]
    city = get_in(body_map, ["address", "city"])

    {:ok, %HTTPoison.Response{status_code: 200, body: body}} = HTTPoison.get "https://jsonplaceholder.typicode.com/users/1"

Messages between parent- and child-processes with task
    task = Task.async(fn -> :timer.sleep(7000); "Done!" end)
    Task.await(task, 7000) -> waits 7s for receiving the message
    task = Task.async(fn -> :timer.sleep(8000); "Done!" end)
    Task.yield(task, 5000) -> receive nil if task has not finished
    Task.shutdown(task) -> cancel task

    :timer.hours(3) -> converts human friendly timer
    case Task.yield(task, :timer.seconds(10))
  {:ok, result} ->
    result
  nil ->
    Logger.warn "Timed out!"
end
